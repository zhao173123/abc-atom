10.18
1.白名单过滤 vliveshowios／vliveos-30---->need test
2.jira-an292--->ok
3.java8
4.guava
*********************************************************
10.19
1.压测，检查jmeter，qcloud和后端api----现在的方式计算onlinenum有问题，但是watchnum没问题？
2.集群怎么处理请求，数据库操作产生脏数据问题和michale sun／leo探讨一下---ok
3.从vicent要receipt-data数据，override moneycontroller.validate->apple
4.v票的实时结算功能-需要android和ios的测试
5.发布v票和课程的hotfix/new/release_2.0->dev测试，没有问题merge到new／release_2.0，并且上生产
**************************************************************************************
10.20
1.apply pay---ok
2.第三方接入支持pc--doing
3.uv／峰值，压测--doing
4.通过关注列表进入直播间，需要带直播间名称（android也需要修改）
**************************************************************************************
10.21
1.white list，apple pay need test--周一测试，在hotfix／new／release_2.0上
2.第三方接入支持pc，下周一测试，在hotfix/new/release_2.0上
3.uv／峰值测试qloud 下周一需要michael支持抓包（取到qcloud调用接口信息），qcloud调用接口的详细信息
4.issue-jira：主播开播后，通知粉丝，app外需要去掉通知（安卓前端可以实现，ios是否要在qcloud中配置？询问tony）
5.android和ios都要兼顾：mini包数据相关，包括马甲包问题+激活／注册接口的修改，虽然是ios需求但是要兼容android
{
5.1 /v1/liveshow/config 接口需要修改-basesysconfig，前端会传送bundle_id，涉及到ios+android；
升级到最新new／策略升级min，需要加配置项
5.2 激活注册统计接口需要区分bundle_id
}
6.支付宝引量对接（import）
**************************************************************************************
10.24
1.white list&第三方接入支持pc,need test
2.uv／峰值测试qloud 下周一需要michael支持抓包（取到qcloud调用接口信息），qcloud调用接口的详细信息
3.app外需要去掉通知,询问tony-mosai
***********************************************
***********************************************
***********************************************
***********************************************
***********************************************
10.25
1.结算问题
2.升级脚本问题---和tony讨论
**************************************************
10.26
1.孙杨的邮件bug---需要解决，已经找到问题所在
2.结算问题--redis的队列为什么执行？？？？？
3.mini包测试，发布--merge dev，dennis测试，ok，需要等ios上线时候测试
4.关闭app外推送--assign ios
5.支付宝推流---sudan，有点问题需要研究一下
6.abc课程申请---下周的事，记录下来
7.记录一下，明天还要查询redis 的用户6000009的history和active  V钻信息
**************************************************
10.27
1.处理10.25-10.26遗留问题
2.处理重复数据问题，是否可以加行级锁／代码加锁，select****for update. synchronized????
3.aplibaba -sudan
4.git-practice,练习一下回退的功能；新建分支，删除分支，本地+远程
5.md5加密 ，sra加密？？？
6.sql injection
7.初始化V钻V票
****************************************************************************************************
****************************************************************************************************
10.28-11.2 plan
1.AN-372  --解决
2.Michael-sun.fastdfs.头像问题 ---打了日志，以后观察
3.VLALL-1：livingtracking重复数据问题，cora查询一下，解决后dev测试+onlinenum 问题
4.git练习，新建／删除分支，回滚提交等；取消某次merge
5.研究一下md5／sra加密／解密
6.初始化V钻V票--sudan的代码是否有问题（mosai之前的实现）
7.事物问题，跟踪一下
8.sql injection---自动被关注，自动粉丝
9.alipay+wechat
10.stopplay_notify有问题，一只卡队列，下周一定解决
11.sunyang-enviroment problem
12.callback本地跑一跑
13.staging environment
****************************************************************************************************
11.3-11.6
1.git 新建／删除分支，回滚提交等；取消某次merge  ---ok
2.stopplay_notify有问题，一直卡队列
3.staging enrivonment---ok
4.backoffice-补上log ok
5.java 8--遍历list／map等：.stream().map的操作
6.redis的处理：spring对redis的支持
7.spring-mongo：new BasicQuery("{}").with(new Sort(new Sort.Order(Sort.Direction.DESC, "createTime"))).limit(1);


1.压测staging环境{1:发消息给qcloud，2:调用后端接口，3:qcloud调用callback接口}，14:00点发布之后测试「oliver+jerry+michael」
2.卡队列问题，和Michael一起检查下{AN-389,AN-388}
3.AN-375的问题是后续改进需求，不算bug
4.AN-387 redis-initilization
5.study  mongo initial集群
****************************************************************************************************
****************************************************************************************************
11.7-11
1.压测staging环境{1:发消息给qcloud，2:调用后端接口，3:qcloud调用callback接口}
2.卡队列问题，和Michael一起检查下{AN-389,AN-388}
3.mongo集群执行json，bson格式文件
4.课程相关设计


观众送礼已经给出，但是关闭直播间还没有处理完，会回滚操作，此时回滚会继续，但是主播显示的V票是直播结束时cache中保存的
处理方法：队列中已经存在了就直接处理，不用判断直播间是否结束，送出的礼物必须结算给主播
****************************************************************************************************
0.h5
1.排序 priority
2.mongo.init
3.local environment
zh-cn,zh-tw,en-us
zh_CN,zh-TW,zh-US
1 美食
2 健身
3 摄影
4 心理
5 音乐

zh-hans简体，zh-hant繁体，en英文
****************************************************************************************************
11.15
1.得到主播即将开课的lesson信息包括course信息
pic_cover,lesson.name,lesson.start_time,leeson.end_time,system.time

11.17
1.maxnum
2.redis集群
3.置顶
4.退费（课程退费-全退，学员退费（嘉宾，普通）-折扣）
****************************************************************************************************
11.21-24
1.安卓／ios测试支持
2.置顶功能-郭峰
3.退费功能-苏丹
4.封禁功能pro、我的预约／我的发布和移动端对接
5.获取courseType数据的接口-黄成
6.苏丹和黄成的course_detail.roominfo
7.预约的排序问题，create_time -和潇潇沟通下
****************************************************************************************************
11.22
1.atom列编辑-ok,使用textmate,alt
2.redis集群-本地
3.处理dev的送礼，结算问题
4.本地安装pg，数据导入
5.和潇潇讨论下app外推送课程相关+黄成
6.置顶功能，郭峰+rex讨论方式
****************************************************************************************************
11.23
1.release/2.3.0
2.staging environment
3.redis集群-本地
****************************************************************************************************
11.24
1.课程直播间去掉机器人   OK
2.本地redis集群
3.bug修复
4.送礼优化
5.整理印象笔记
6.直播间最大观看人数--priority
****************************************************************************************************
11.25
1.强制升级：ios／android ---郭峰
是否强生，根据前端版本号和min对比，如果版本号<min 必须强生，>=min且<=max type：warning；前端和现在版本一致，就不设置
2.直播间最大观看人数  ---测试
3.送礼优化 ：----------------------------
4.redis ： 第三方登录初始化 ---测试
4.0 手机号登录
4.1 手机验证码登录：
发送——>http://dev.vliveshow.com/vliveshow-api-app/v1/users/phone/send_verification_code?client=android&client_os=6.0.1&client_language=zh-hans&version_code=11&version_name=2.3.1&app_id=vlive&device_id=dd403f3ccecb752a7e7eee64a5bd72f2
登录->http://dev.vliveshow.com/vliveshow-api-app/v1/users/phone/verifycode_login?client=android&client_os=6.0.1&client_language=zh-hans&version_code=11&version_name=2.3.1&app_id=vlive&device_id=dd403f3ccecb752a7e7eee64a5bd72f2
4.2 第三方入口登录
4.2.1 微信登录 h
ttp://dev.vliveshow.com/vliveshow-api-app/v1/tencent/signature?token=7880e7b758d7c5c2b114ff95124ed63b&client=android&client_os=6.0.1&client_language=zh-hans&version_code=11&version_name=2.3.1&app_id=vlive&device_id=dd403f3ccecb752a7e7eee64a5bd72f2
http://dev.vliveshow.com/vliveshow-api-app/v1/users/thirdparty/login?client=android&client_os=6.0.1&client_language=zh-hans&version_code=11&version_name=2.3.1&app_id=vlive&device_id=dd403f3ccecb752a7e7eee64a5bd72f2

1.订阅课程-历史记录在
2.送礼优化
****************************************************************************************************
11.28
1.redis的发布订阅-送礼优化 stging环境测试
2.升级提jira（功能点罗列说明）
3.初始化redis ----
4.充值记录排序---ok
5.印象笔记整理
6.es研究下，修改数据
7.staging环境
****************************************************************************************************
11.29
1.直播间排序   ok
2.staging
3.送礼优化（staging环境好了之后做）：订阅／发布
4.ES  ---ok
5.redis当机情况考虑
6.cora bug
****************************************************************************************************
12.1
1.hotfix（送礼，短信群发）
2.和rex讨论需求，接口定义
3.app端禁言
4.App和H5交互
5.新建课程的标签bug
****************************************************************************************************
12.12
1.考核kpi  --ok
2.解决bug
3.19号表演时间 --ok

hotfix：
1.妈妈来秀直播间排序
2.领奖短信模版修改
3.亲友领券
4.
****************************************************************************************************
12.15
1.hotfix-修改预约表演时间 --ok
2.解决staging环境问题
3.bug修改
5.redisson
6.fastdfs-client-java
****************************************************************************************************
1.staging
2.嘉宾连线
3.redisson
4.fastdfs-client-java
****************************************************************************************************
12.21
1.issue修改
2.redisson
****************************************************************************************************
12.26
1.优化送礼
1.1 每个直播间拥有自己的送礼队列 --part
1.2 引入redssion处理redis --研究
1.3 竞争锁如果是余额不足，则将队列中此用户全部取出（如何过滤队列数据-选择性清除队列） --X，后期需要优化部分🐷
送礼消息队列递增，处理时候也是？不按照roomId
获取分布式锁并处理太耗时，如何处理
1.4 jmeter 压测
1.5 不能影响其他直播间的送礼效果展示（队列拆分） --部分实现，如果主播的userId最后2位正好处于同一个队列还是会影响
1.6 接口接受请求上限，向redis队列压数据 --X，暂时还没有到瓶颈，先不处理
1.7 是否可以建立直播间的时候就创建发布者，送礼的时候向直播间队列插入 --X
1.8 使用线程处理，建立长连接？直播间结束时销毁发布者？1小时一次检查是否直播间还存在，不存在销毁？ --X
1.9 订阅SENDGIFT_NOTIFY[0-49]--👌
1.9.1 用户送礼的时候信息进入队列，按照userId的后2位判断进入那个队列 --👌
1.9.2 默认监听SENDGIFT_NOTIFY[0-49]，每一个订阅者起一个线程处理礼物pop  --👌
1.9.3 送礼接口时候判断userId和timestamp，如果队列中存在则不push --👌
1.9.4 热门主播单独设置发布者队列 --X，暂时没有啥热门主播吧，官方的算吗？
1.9.5 队列达到多少应该自动加队列，满额50？--👌
1.9.6 app端的GiftGivingRequestParams需要优化 --X，需要app端支持
仅仅需要givingUserId，roomId，timestamp，giftId，num，clientLanguage，
app端处理，不要再次调用图片接口了，自己本地缓存，这些内容包括：
送礼人头像，礼物图片，送礼类型，FoldName，isLocal，AspectRation，礼物图片Thumb3x，
PlayOnceTime，RepeatTime

后端处理：
接受remark：givingUserId，roomId，timestamp，giftId，
            num（没有连击请求效果，默认都是1，app端最后支持连击效果一次请求），clientLanguage
返回：具体的返回参数需要商定，这里给出一个初始版本
userId&giftId&「nickName」送了一个神秘礼物xxx&num&timestamp
*************************************************************
1.9.7 送礼按照送礼人队列，如果队列出现异常可以直接del***************
1.9.7 查看获得锁之后每个步骤的操作时间进行优化，lua语法做redis处理****
1.9.8 redis事物处理********************************************
*************************************************************

2.UTC和CST时间误差,试试mongo查询结果
****************************************************************************************************
1.2 礼物处理过程
1.GiftController增加时间戳判断，已经处理过的时间戳礼物不push
2.初始化订阅者时，监听50个队列，0-49：__keyspace@0__:SENDGIFT_NOTIFY_0/49
****************************************************************************************************
1月6日安排：
1.标签测试
2.频道加入mongo，测试接口显示
3.栏目[妈妈来秀、总裁来秀、官方出品、精品课程、精彩回顾、人文艺术、生活时尚、户外体育、心理法律]的查询功能，应该不变？
4.数据埋点
5.旁路直播的统计
6.推荐，包括banner、预约、普通直播，课程、（精彩回顾）
  6.1 精彩回顾必须要单独存放表里才可以做到排序规则
  6.2 banner、预约、精彩回顾position的概念
  6.3 普通直播和课程是priority概念
7.BO的预置顶功能，只包括banner和课程预约，当到了生效时间时自动置顶（position）？
8.BO的banner、预约、直播展示在不同channel
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
************************************************2017************************************************
🌟02.06🌟
1.计划会2.7.0版本功能，2月底3月初
  1.1 直播间内对主播进行评价（一场直播一人一次，评价过不能修改；只能在BO端查看）
  1.2 主播发布预约直播的功能（一个星期以内，时间、标签、标题，可以进行分享-H5页面，出现在计划中）
  1.3 关注页面调整
  1.4 主播圈子功能（主播粉丝的群聊功能，分为主播样式和用户样式，禁言、拉黑在圈子中生效）
  1.5 站内信、私聊功能
  1.6 主播个人信息（前3名粉丝信息）
  1.7 直播结束页面添加关注功能
  1.8 课程专区
  1.9 主播申请标签和开播标签保持一致
  2.0 新开直播间的列表展示，ES时间问题
****************************************************************************************************
1.selectList自动加上count(1)，Cora help me ？
2.ES的时间问题:liveshow.time时间设置，set方法转换
3.房间结算获取锁失败？ February 6th 2017, 16:34:00.594 ～ February 6th 2017, 16:39:29.429
****************************************************************************************************
2.13 课程专区
1.课程专区list，按照priority从大到小排序；app端根据后端返回选择5个显示在第一栏；每次滑动显示5个
2.单个课程专区内容显示，显示内容课程+预约（1大带4小，运营控制，按照priority排序）？如何显示？
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟
1.线程synchronized|lock、同步锁|异步锁
2.集群redis.setnx
3.数据库索引、失效、建立索引规则、sql慢查询优化
4.二分法、迭代、递归（斐波那契数列）、
5.设计模式（策略、装饰、适配、享元、工厂、代理、门面、建造者、观察者）
6.hibernate|mybatis
7.集合、IO、NIO、JVM、线程、通信协议、SpringMVC框架原理
8.线程池，Concurrent
  ***********************************************************************************************
  Java的CAS会使用现代处理器上提供的高效机器级别原子指令，这些原子指令以原子方式对内存执行读-改-写操作，
  这是在多处理器中实现同步的关键（从本质上来说，能够支持原子性读-改-写指令的计算机器，是顺序计算图灵机的异步等价机器，
  因此任何现代的多处理器都会去支持某种能对内存执行原子性读-改-写操作的原子指令）
  同时，volatile变量的读/写和CAS可以实现线程之间的通信。
  把这些特性整合在一起，就形成了整个concurrent包得以实现的基石。

  Java线程之间的通信4种方式：
  1.A线程写volatile变量，随后B线程读这个volatile变量
  2.A线程写volatile变量，随后B线程用CAS更新这个volatile变量
  3.A线程用CAS更新一个volatile变量，随后B线程用CAS更新这个volatile变量
  4.A线程用CAS更新一个volatile变量，随后B线程读这个volatile变量

  Concurrent源码实现，一个通用的方式：
  1.首先，声明共享变量为volatile
  2.然后，使用CAS的原子条件更新来实现线程之间的同步
  3.同时，配合以volatile的读／写和CAS所具有的volatile读和写内存语义来实现线程间的通讯

9.悲观锁、乐观锁  -- synchronized，lock／unlock，volatile
  9.1悲观锁：一段执行逻辑加上悲观锁，不同线程同时执行时，只能有一个线程执行，其他的线程在入口处等待，直到锁释放
  9.2乐观锁：一段执行逻辑加上乐观锁,不同线程同时执行时,可以同时进入执行,在最后更新数据的时候要检查这些数据是否被其他线程修改了(版本和执行初是否相同),没有修改则进行更新,否则放弃本次操作.
  9.3cas:Compare and Swap,比较交换
    cas有3个操作数：内存值V，旧的预期值A，要修改的新值B；当且仅当A等于V时，将内存值修改为B，否则什么都不做
    探究AtomicInteger如何在没有锁的情况下保证数据正确性：
    private volatile int value;
    public final int get(){
      return value;
    }
    ++i的实现：
    public final int intcrementAndGet(){
        for(;;){
          int current = get();
          int next = current + 1;
          if(compareAndSet(current, next)){
              return next;
          }
        }
    }
    这里采用了CAS操作，每次从内存中读取数据，然后将此数据和+1后的值进行比较，如果成功则返回结果；否则重试直到成功。
    而public final boolean compareAndSet(int expect, int update){
        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);
    }
    利用JNI来完成CPU指令的操作。

    CAS缺点：ABA问题&循环时间长开销大
    1.ABA问题 http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html
        如果原来一个值是A，变成B，又变成A，那么CAS在进行检查的时候会发现它的值没有变化，但是实际上却变化了。
        ABA的问题解决思路就是使用版本号，在变量前追加版本号，每次变量更新时把版本+1，那么A-B-A就变成了1A-2B-3A

        JDK1.5开始，提供了java.util.concurrent.atomic.AtomicStampedReference来解决ABA问题。
        AtomicStampedReference.compareAndSet首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，
        则以原子方式将该引用和该标志的值设置为给定的更新值。
    2.循环时间长开销大
        自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，
        pause指令有两个作用，
        第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，
        延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。
        第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）
        而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。
    3.只能保证一个共享变量的原子操作
        当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，
        但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，
        或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。
10.Spring事务
11.支付宝、微信、Apple pay充值系统
12.ThreadLocal/HashMap/ConcurrentHashMap/ArrayList/Atomic,
    线程模型，lock／unlock，synchronized原理,volatile线程通讯
13.IO/NIO，Netty
14.JVM
15.HTTP协议／TCP协议／UDP协议，状态码
16.unSafe
🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟
