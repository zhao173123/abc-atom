public class WithinThreadExecutor implements Executor{
  public void execute(Runnable r){
      r.run();
  }
}
public class TimeBudget{

  private static ExecutorService exec = Executors.newCachedThreadPool();

  public List<TravelQuote> getRankedTravelQuotes(TravelInfo travelInfo, Set<TravelCompany> companies,
          Comparator<TravelQuote> ranking, long time, TimeUnit unit) throws InterruptedException{
            List<QuoteTask> tasks = Lists.newArrayList<QuoteTask>();
            for(TravelCompany company : companies){
                tasks.add(new QuoteTask(company, travelInfo));
            }
            List<Future<TravelQuote>> futures = exec.invokeAll(tasks, time, unit);
            List<TravelQuote> quotes = Lists.newArrayList(tasks.size());
            Iterator<QuoteTask> taskIterator = tasks.iterator();
            for(Future<TravelQuote> f : futures){
              QuoteTask task = taskIterator.next();
              try{
                quotes.add(f.get());
              }catch(ExecutionException e){
                  qutoes.add(task.getFailureQuote(e.getCause()));
              }catch(CancellationException e){
                  qutoes.add(task.getTimeoutQuote(e));
              }
            }

  }
}

interface QuoteTask implements Callable<TravelQuote> {
  private final TravelCompany company;
  private final TravelInfo travelInfo;

  public QuoteTask(TravelCompany company, TravelInfo travelInfo) {
      this.company = company;
      this.travelInfo = travelInfo;
  }

  TravelQuote getFailureQuote(Throwable t){
      return null;
  }
  TravelQuote getTimeoutQuote(CancellationException e){
      return null;
  }

  public void call() throws Exception{
    return company.solicitQuote(travelInfo);
  }
}

interface TravelCompany {
  TravelQuote solicitQuote(TravelInfo travelInfo) throws Exception;
}

interface TravelQuote {

}

interface TravelInfo {

}
