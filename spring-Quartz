1.调度器，Scheduler的配置：代表一个Quartz的独立运行容器，Trigger和JobDetail都需要在Scheduler中注册才会生效
<bean id="myScheduler"
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="myTriggersA" />
                <ref bean="myTriggersB" />
            </list>
        </property>
        <property name="autoStartup" value="true" />
</bean>
2.Trigger的配置：Job执行触发的时间规则，
其中：SimpleTrigger和CronTrigger两个子类代表两种方式
每隔多少分钟小时执行，则用SimpleTrigger，
日历相关的重复时间间隔，如每天凌晨，每周星期一运行的话，通过Cron表达式便可定义出复杂的调度方案
<bean id="myTriggersA"
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="myJobDetailA" />
        <property name="cronExpression">
            <value>0/1 * * * * ?</value>
        </property>
</bean>
3.JobDetail的配置：描述任务的相关情况
<bean id="myJobDetailA"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="myJobA"/>
        <property name="targetMethod" value="work"/>
        <property name="concurrent" value="false" />
        <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
</bean>
4.业务类的配置
<bean id="myJobA" class="com.quartz.MyJobA"></bean>
5.实现类
import java.util.Date;

public class MyJobA {

    public void work() {
        System.out.println("date: " + new Date().getTime());
    }
}　　　　
******************************************************************************************************
**********************************Cron表达式***********************************************************
******************************************************************************************************
6.Cron表达式的格式：秒(0-59)分(0-59)时(0-23)日(1-31)月(1-12)周(1-7)年(可选)。
“*”字符被用来指定所有的值。如："*"在分钟的字段域里表示“每分钟”。
“?”字符只在日期域和星期域中使用。它被用来指定“非明确的值”。
“,”字符被用来指定另外的值。如：“MON,WED,FRI”在星期域里表示”星期一、星期三、星期五”。
“-”字符被用来指定一个范围。如：“10-12”在小时域意味着“10点、11点、12点”。
“/”字符用于指定增量。如：“0/15”在秒域意思是每分钟的0，15，30和45秒。
    “5/15”在分钟域表示每小时的5，20，35和50。
    符号“*”在“/”前面（如：*/10）等价于0在“/”前面（如：0/10）。
    记住一条本质：表达式的每个数值域都是一个有最大值和最小值的集合，
      如： 秒域和分钟域的集合是0-59，日期域是1-31，月份域是1-12。
      字符“/”可以帮助你在每个字符域中取相应的数值。如：“7/6”在月份域的时候只有当7月的时候才会触发，并不是表示每个6月。
L是‘last’的省略写法可以表示day-of-month和day-of-week域，
    但在两个字段中的意思不同，例如day-of- month域中表示一个月的最后一天。
    如果在day-of-week域表示‘7’或者‘SAT’，
    如果在day-of-week域中前面加上数字，它表示一个月的最后几天，例如‘6L’就表示一个月的最后一个星期五。
字符“W”只允许日期域出现。
    这个字符用于指定日期的最近工作日。
    例如：如果你在日期域中写 “15W”，表示：这个月15号最近的工作日。
    所以，如果15号是周六，则任务会在14号触发。
    如果15好是周日，则任务会在周一也就是16号触发。
    如果是在日期域填写“1W”即使1号是周六，那么任务也只会在下周一，也就是3号触发，
    “W”字符指定的最近工作日是不能够跨月份的。
    字符“W”只能配合一个单独的数值使用， 不能够是一个数字段，如：1-15W是错误的。
“L”和“W”可以在日期域中联合使用，LW表示这个月最后一周的工作
字符“#”只允许在星期域中出现。这个字符用于指定本月的某某天。
    例如：“6#3”表示本月第三周的星期五（6表示星期五，3表示第三周）。
    “2#1”表示本月第一周的星期一。“4#5”表示第五周的星期三。
6.Cron表达式范例：
每隔5秒执行一次：*/5 * * * * ?
每隔1分钟执行一次：0 */1 * * * ?
每天23点执行一次：0 0 23 * * ?
每天凌晨1点执行一次：0 0 1 * * ?
每月1号凌晨1点执行一次：0 0 1 1 * ?
每月最后一天23点执行一次：0 0 23 L * ?
每周星期天凌晨1点实行一次：0 0 1 ? * L
在26分、29分、33分执行一次：0 26,29,33 * * * ?
每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?
每天中午12点触发:"0 0 12 * * ?"
"0 15 10 ? * *" 每天上午10:15触发
"0 15 10 * * ?" 每天上午10:15触发
"0 15 10 * * ? *" 每天上午10:15触发
2005年的每天上午10:15触发:"0 15 10 * * ? 2005"
在每天下午2点到下午2:59期间的每1分钟触发:"0 * 14 * * ?"
在每天下午2点到下午2:55期间的每5分钟触发:"0 0/5 14 * * ?"
在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发:"0 0/5 14,18 * * ?"
在每天下午2点到下午2:05期间的每1分钟触发:"0 0-5 14 * * ?"
每年三月的星期三的下午2:10和2:44触发:"0 10,44 14 ? 3 WED"
周一至周五的上午10:15触发:"0 15 10 ? * MON-FRI"
每月15日上午10:15触发:"0 15 10 15 * ?"
每天早上6点：0 0 6 * * ？
每两个小时：0 */2 * * * ？
晚上11点到早上8点之间每两个小时，早上八点：0 23-7/2，8 * * *
